name: Student Success Prediction CI/CD Pipeline

on:
  push:
    branches: [ main, dev, feature/* ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_student_success
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest coverage pytest-cov pytest-mock psutil
    
    - name: Set up test environment variables
      run: |
        echo "TESTING=true" >> $GITHUB_ENV
        echo "MVP_API_KEY=test-key-ci-cd" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_student_success" >> $GITHUB_ENV
        echo "DEVELOPMENT_MODE=true" >> $GITHUB_ENV
    
    - name: Initialize database
      run: |
        python -c "
        import sys, os
        sys.path.append('src')
        from mvp.database import init_database
        init_database()
        print('Database initialized for CI/CD')
        "
    
    - name: Run unit tests
      run: |
        python tests/run_tests.py unit --verbose --coverage
    
    - name: Run integration tests
      run: |
        python tests/run_tests.py integration --verbose
    
    - name: Run performance tests
      run: |
        python tests/run_tests.py performance --verbose
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./tests/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security scan with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ || true
    
    - name: Check for known vulnerabilities
      run: |
        safety check --json || true

  model-validation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate K-12 models
      run: |
        python -c "
        import sys, os
        sys.path.append('src')
        from models.k12_ultra_predictor import K12UltraPredictor
        try:
            predictor = K12UltraPredictor()
            model_info = predictor.get_model_info()
            print(f'‚úÖ K-12 Ultra Model: {model_info[\"auc_score\"]:.3f} AUC')
            assert model_info['auc_score'] > 0.7, 'Model AUC too low'
            print('‚úÖ Model validation passed')
        except Exception as e:
            print(f'‚ö†Ô∏è Model validation warning: {e}')
        "
    
    - name: Validate original models
      run: |
        python -c "
        import sys, os
        sys.path.append('src')
        from models.intervention_system import InterventionRecommendationSystem
        try:
            system = InterventionRecommendationSystem()
            print(f'‚úÖ Original model loaded with {len(system.feature_columns)} features')
            print('‚úÖ Original model validation passed')
        except Exception as e:
            print(f'‚ö†Ô∏è Original model validation warning: {e}')
        "

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test, security-scan, model-validation]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build application
      run: |
        echo "Building Student Success Prediction MVP..."
        python -c "
        import sys
        sys.path.append('src')
        from mvp.mvp_api import app
        print('‚úÖ Application builds successfully')
        "
    
    - name: Create deployment package
      run: |
        tar -czf student-success-prediction.tar.gz \
          src/ \
          requirements.txt \
          run_mvp.py \
          alembic.ini \
          alembic/ \
          --exclude=src/**/__pycache__ \
          --exclude=src/**/*.pyc
        
        echo "‚úÖ Deployment package created: student-success-prediction.tar.gz"
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: student-success-prediction-${{ github.sha }}
        path: student-success-prediction.tar.gz
        retention-days: 30

  notify:
    runs-on: ubuntu-latest
    needs: [test, security-scan, model-validation, build-and-deploy]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.security-scan.result == 'success'
      run: |
        echo "üéâ CI/CD Pipeline completed successfully!"
        echo "‚úÖ All tests passed"
        echo "‚úÖ Security scan completed"
        echo "‚úÖ Model validation passed"
        echo "‚úÖ Build and deployment ready"
    
    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.security-scan.result == 'failure'
      run: |
        echo "‚ùå CI/CD Pipeline failed!"
        echo "Please check the logs for details."
        exit 1