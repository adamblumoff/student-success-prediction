version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: student_success_app
    restart: unless-stopped
    ports:
      - "${PORT:-8001}:8001"
    environment:
      # Database configuration (Neon.tech)
      - DATABASE_URL=${DATABASE_URL}
      
      # API configuration
      - MVP_API_KEY=${MVP_API_KEY:-secure-production-key-change-me}
      
      # Application settings
      - PORT=8001
      - SQL_DEBUG=${SQL_DEBUG:-false}
      - PYTHONPATH=/app
      
      # Email notifications (optional)
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - SMTP_SERVER=${SMTP_SERVER:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      
      # Production settings
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
    volumes:
      # Persistent storage for logs and reports
      - app_logs:/app/logs
      - app_reports:/app/test_reports
      - app_backups:/app/backups
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.student-success.rule=Host(`your-domain.com`)"
      - "traefik.http.routers.student-success.tls=true"
      - "traefik.http.routers.student-success.tls.certresolver=letsencrypt"
      - "traefik.http.services.student-success.loadbalancer.server.port=8001"

  # Health monitoring service
  monitor:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: student_success_monitor
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - MVP_API_KEY=${MVP_API_KEY}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - ENVIRONMENT=production
    volumes:
      - app_logs:/app/logs
      - app_reports:/app/test_reports
    command: ["python3", "scripts/system_health_monitor.py", "--continuous", "15", "--output", "file", "--email"]
    depends_on:
      - app
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # Optional: Reverse proxy with SSL termination
  traefik:
    image: traefik:v3.0
    container_name: student_success_proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    environment:
      - TRAEFIK_API_DASHBOARD=true
      - TRAEFIK_API_INSECURE=true
      - TRAEFIK_PROVIDERS_DOCKER=true
      - TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT=false
      - TRAEFIK_ENTRYPOINTS_WEB_ADDRESS=:80
      - TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS=:443
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL=${ACME_EMAIL:-admin@example.com}
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_STORAGE=/acme/acme.json
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_HTTPCHALLENGE_ENTRYPOINT=web
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_acme:/acme
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.your-domain.com`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"

volumes:
  app_logs:
    driver: local
  app_reports:
    driver: local
  app_backups:
    driver: local
  traefik_acme:
    driver: local

networks:
  default:
    name: student_success_network